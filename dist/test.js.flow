/**
 * Flowtype definitions for test
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import { ZalgoPromise } from "zalgo-promise";
declare type Prom<X> = Promise<X> | ZalgoPromise<X>;
declare type Handler = <T, A: $ReadOnlyArray<mixed>>(
  name: string,
  fn?: (...args: A) => T
) => (...args: A) => T;
declare type Wrapper<T> = (arg0: {
  expect: Handler,
  avoid: Handler,
  expectError: Handler,
  error: Handler,
  wait: () => Prom<void>,
  ...
}) => Prom<T> | void;
declare export function wrapPromise<T>(
  method: Wrapper<T>,
  x?: {
    timeout?: number,
    ...
  }
): ZalgoPromise<void>;
declare export {};
