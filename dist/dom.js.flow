/**
 * Flowtype definitions for dom
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import { ZalgoPromise } from "zalgo-promise";
import type {
  SameDomainWindowType,
  CrossDomainWindowType,
} from "cross-domain-utils";
import { ExtendableError } from "./util";
import type { CancelableType } from "./types";
declare type ElementRefType = string | HTMLElement;
declare export function getBody(): HTMLBodyElement | HTMLElement;
declare export function isDocumentReady(): boolean;
declare export function isDocumentInteractive(): boolean;
declare export function urlEncode(str: string): string;
declare export function waitForWindowReady(): ZalgoPromise<void>;
declare type WaitForDocumentReady = () => ZalgoPromise<void>;
declare export var waitForDocumentReady: WaitForDocumentReady;
declare export function waitForDocumentBody(): ZalgoPromise<
  HTMLElement | HTMLBodyElement
>;
declare export function parseQuery(queryString: string): {
  [key: string]: any,
  ...
};
declare export function getQueryParam(name: string): string;
declare export function urlWillRedirectPage(url: string): boolean;
export type Query = { [key: string]: boolean | string, ... };
declare export function formatQuery(obj?: Query): string;
declare export function extendQuery(
  originalQuery: string,
  props?: Query
): string;
declare export function extendUrl(
  url: string,
  options: {
    query?: Query,
    hash?: Query,
    ...
  }
): string;
declare export function redirect(
  url: string,
  win?: CrossDomainWindowType
): ZalgoPromise<void>;
declare export function hasMetaViewPort(): boolean;
declare export function isElementVisible(el: HTMLElement): boolean;
declare export function getPerformance(): Performance | null | void;
declare export function enablePerformance(): boolean;
declare export function getPageRenderTime(): ZalgoPromise<number | null | void>;
declare export function htmlEncode(html?: string): string;
declare export function isBrowser(): boolean;
declare export function querySelectorAll(
  selector: string,
  doc?: HTMLDocument
): $ReadOnlyArray<HTMLElement>;
declare export function onClick(
  element: HTMLElement,
  handler: (arg0: Event) => void
): void;
declare export function getScript(x: {
  host?: string,
  path: string,
  reverse?: boolean,
  ...
}): HTMLScriptElement | null | void;
declare export function isLocalStorageEnabled(): boolean;
declare export function getBrowserLocales(): Array<{
  country?: string,
  lang: string,
  ...
}>;
declare export function appendChild(
  container: HTMLElement,
  child: HTMLElement | Text
): void;
declare export function isElement(element: mixed): boolean;
declare export function getElementSafe(
  id: ElementRefType,
  doc?: Document | HTMLElement
): HTMLElement | null | void;
declare export function getElement(
  id: ElementRefType,
  doc?: Document | HTMLElement
): HTMLElement;
declare export function elementReady(
  id: ElementRefType
): ZalgoPromise<HTMLElement>;
declare export class PopupOpenError mixins ExtendableError {}
declare type PopupOptions = {
  name?: string,
  width?: number,
  height?: number,
  top?: number,
  left?: number,
  status?: 0 | 1,
  resizable?: 0 | 1,
  toolbar?: 0 | 1,
  menubar?: 0 | 1,
  scrollbars?: 0 | 1,
  ...
};
declare export function popup(
  url: string,
  options?: PopupOptions
): CrossDomainWindowType;
declare export function writeToWindow(
  win: SameDomainWindowType,
  html: string
): void;
declare export function writeElementToWindow(
  win: SameDomainWindowType,
  el: HTMLElement
): void;
declare export function setStyle(
  el: HTMLElement,
  styleText: string,
  doc?: Document
): void;
export type ElementOptionsType = {
  style?: { [key: string]: string, ... },
  id?: string,
  class?: $ReadOnlyArray<string> | null | void,
  attributes?: { [key: string]: string, ... },
  styleSheet?: string | null | void,
  html?: string | null | void,
  ...
};
declare export function awaitFrameLoad(
  frame: HTMLIFrameElement
): ZalgoPromise<HTMLIFrameElement>;
declare export function awaitFrameWindow(
  frame: HTMLIFrameElement
): ZalgoPromise<CrossDomainWindowType>;
declare export function createElement(
  tag: string,
  options: ElementOptionsType,
  container: HTMLElement | null | void
): HTMLElement;
declare type StringMap = { [key: string]: string, ... };
export type IframeElementOptionsType = {
  style?: StringMap,
  class?: $ReadOnlyArray<string> | null | void,
  attributes?: StringMap,
  styleSheet?: string | null | void,
  html?: string | null | void,
  url?: string | null | void,
  ...
};
declare export function iframe(
  options: IframeElementOptionsType,
  container: HTMLElement | null | void
): HTMLIFrameElement;
declare export function addEventListener(
  obj: HTMLElement,
  event: string,
  handler: (event: Event) => void
): CancelableType;
declare export function bindEvents(
  element: HTMLElement,
  eventNames: $ReadOnlyArray<string>,
  handler: (event: Event) => void
): CancelableType;
declare export function setVendorCSS(
  element: HTMLElement,
  name: string,
  value: string
): void;
declare export function animate(
  element: ElementRefType,
  name: string,
  clean: (arg0: (...args: Array<any>) => any) => void,
  timeout?: number
): ZalgoPromise<void>;
declare export function makeElementVisible(element: HTMLElement): void;
declare export function makeElementInvisible(element: HTMLElement): void;
declare export function showElement(element: HTMLElement): void;
declare export function hideElement(element: HTMLElement): void;
declare export function destroyElement(element: HTMLElement): void;
declare export function showAndAnimate(
  element: HTMLElement,
  name: string,
  clean: (arg0: (...args: Array<any>) => any) => void
): ZalgoPromise<void>;
declare export function animateAndHide(
  element: HTMLElement,
  name: string,
  clean: (arg0: (...args: Array<any>) => any) => void
): ZalgoPromise<void>;
declare export function addClass(element: HTMLElement, name: string): void;
declare export function removeClass(element: HTMLElement, name: string): void;
declare export function isElementClosed(el: HTMLElement): boolean;
declare export function watchElementForClose(
  element: HTMLElement,
  handler: () => mixed
): CancelableType;
declare export function fixScripts(el: HTMLElement, doc?: Document): void;
declare type OnResizeOptions = {
  width?: boolean,
  height?: boolean,
  interval?: number,
  win?: SameDomainWindowType,
  ...
};
declare export function onResize(
  el: HTMLElement,
  handler: (arg0: {
    width: number,
    height: number,
    ...
  }) => void,
  x?: OnResizeOptions
): {
  cancel: () => void,
  ...
};
declare export function getResourceLoadTime(url: string): number | null | void;
declare export function isShadowElement(element: Node): boolean;
declare export function getShadowRoot(element: Node): Node | null | void;
declare export function getShadowHost(element: Node): HTMLElement | null | void;
declare export function insertShadowSlot(element: HTMLElement): HTMLElement;
declare export function preventClickFocus(el: HTMLElement): void;
declare export function getStackTrace(): string;
declare type GetCurrentScript = () => HTMLScriptElement;
declare export var getCurrentScript: GetCurrentScript;
declare type GetCurrentScriptUID = () => string;
declare export var getCurrentScriptUID: GetCurrentScriptUID;
declare type SubmitFormOptions = {
  url: string,
  target: string,
  body?: { [key: string]: string | boolean, ... },
  method?: string,
  ...
};
declare export function submitForm(x: SubmitFormOptions): void;
declare export {};
